{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Running Java Welcome to my blog, at which I will write about my two main passions: Running \ud83c\udfc3\u200d\u2642\ufe0f and being a Java developer \ud83d\udc68\u200d\ud83d\udcbb. In general the content is divided into two categories: On the one hand I'll posts , which cover different topics about running and Java stuff (including testing). Next to this I write some reviews about books etc. If you want to get in touch with me, you find me at GitHub and Twitter . Of course, you can also send me an e-mail \ud83d\udce7 . If you discover some errors (I'm not a native English speaker), please contact me or feel free to create an issue at GitHub . Latest additions 2021-01-01 | Post: I dit it 2021-01-01 | Review: Nicolai Parlog - The Java Module System 2021-01-01 | Review: Arnon Axelrod - Complete Guide to Test Automation","title":"Home"},{"location":"#running-java","text":"Welcome to my blog, at which I will write about my two main passions: Running \ud83c\udfc3\u200d\u2642\ufe0f and being a Java developer \ud83d\udc68\u200d\ud83d\udcbb. In general the content is divided into two categories: On the one hand I'll posts , which cover different topics about running and Java stuff (including testing). Next to this I write some reviews about books etc. If you want to get in touch with me, you find me at GitHub and Twitter . Of course, you can also send me an e-mail \ud83d\udce7 . If you discover some errors (I'm not a native English speaker), please contact me or feel free to create an issue at GitHub .","title":"Running Java"},{"location":"#latest-additions","text":"2021-01-01 | Post: I dit it 2021-01-01 | Review: Nicolai Parlog - The Java Module System 2021-01-01 | Review: Arnon Axelrod - Complete Guide to Test Automation","title":"Latest additions"},{"location":"about/","text":"About me I'm Matthias, a software development enthusiast in his thirties, who loves Java, Java EE / Jakarta EE and testing. After finishing school I started my apprenticeship as a software developer, because I'm a person who loves learning by doing. I graduated as the second best of my year, achieving maximum points in my oral examination. This, and two other guys from work, convinced me that I might get an academic degree. So I worked 50% part-time and studied computer science at the university of Bonn. Because of three cancer therapies in less than five years, it took longer than expected, but in the end I managed to finish my bachelor degree. I did my apprenticeship in the German financial government sector and stayed there since then, becoming a civil servant some years ago. Right after the apprenticeship I was \"just\" a programmer, but over the years I have improved in many fields of my work and have gained a lot of further competences regarding all areas of developing and quality assurance. At the moment I'm in a leading position responsible for a large mass data application about national taxes. I'm trying to improve our workflows by adding more automation. In my spare time I do quite a lot of self-education programmes to improve my developing skills. As a balance to the IT stuff, I love running . I also like playing board games, especially co-op games like Pandemic or The Crew - Quest for Planet Nine .","title":"About Me"},{"location":"about/#about-me","text":"I'm Matthias, a software development enthusiast in his thirties, who loves Java, Java EE / Jakarta EE and testing. After finishing school I started my apprenticeship as a software developer, because I'm a person who loves learning by doing. I graduated as the second best of my year, achieving maximum points in my oral examination. This, and two other guys from work, convinced me that I might get an academic degree. So I worked 50% part-time and studied computer science at the university of Bonn. Because of three cancer therapies in less than five years, it took longer than expected, but in the end I managed to finish my bachelor degree. I did my apprenticeship in the German financial government sector and stayed there since then, becoming a civil servant some years ago. Right after the apprenticeship I was \"just\" a programmer, but over the years I have improved in many fields of my work and have gained a lot of further competences regarding all areas of developing and quality assurance. At the moment I'm in a leading position responsible for a large mass data application about national taxes. I'm trying to improve our workflows by adding more automation. In my spare time I do quite a lot of self-education programmes to improve my developing skills. As a balance to the IT stuff, I love running . I also like playing board games, especially co-op games like Pandemic or The Crew - Quest for Planet Nine .","title":"About me"},{"location":"posts/","text":"Posts This in an overview of all my posts I wrote so far. Goal is to keep this list growing ;) To read the article, just click the link of it. 2021 2021-01-01 | I did it","title":"Posts"},{"location":"posts/#posts","text":"This in an overview of all my posts I wrote so far. Goal is to keep this list growing ;) To read the article, just click the link of it.","title":"Posts"},{"location":"posts/#2021","text":"2021-01-01 | I did it","title":"2021"},{"location":"reviews/","text":"Reviews This in an overview of all my reviews I've written so far or which I plan to write. I grouped them loosely by their topic, to make it easier to compare them. Unless a review is listed in the \"Others\" section, it's related to software engineering. This is true for most of my things I review. The reviews are listed in lexicographical order by the name of the (first) author or creator. To read a review simply click on the link. If there's no link, I have not written a review yet. I use a \"five star\" value to rate the objects I reviewed, where a single star means \"Did not answer my expectations / meet my needs\", while I use five stars to show \"Totally satisfied my expectations / meet my needs. Highly recommend it.\". I've decided to use a \"five star\" value to rate, because I think a range of three values is too small, while a range of more is too large. Note that all the reviews include my personal opinion (and needs) , meaning that e.g. a book I rate high and useful may not have an equal use for you! All of my reviews are about the object's content, regardless of its author's / creator's social or political points of view! Books General This section contains basic and general knowledge about developing software, not bound to a specific language. Cooper, Reimann, Cronin - About Face: The Essentials of Interaction Design Amazon Kemper, Eickler - Datenbanksysteme Amazon Martin Fowler - Refactoring Simon Harrer - Java by Comparison ( I put it under \"General\" as the code examples are Java, but the essentials are language independent - like in the other books listed here. Simon mentioned he would name the book something like \"Cleaner Code by Comparison\" today. ) Robert Martin - Clean Code Robert Martin - Clean Architecture Gernot Starke - Effektive Softwarearchitekturen David Tanzer - Quick Glance At: Agile Anti-Patterns David Tanzer - Quick Glance At: Agile Engineering Practices: Part 1: Writing Software Java / Java Enterprise Sebastian Daschner - Architecting Modern Java EE Application Trisha Gee, Kevlin Henney - 97 Things Every Java Programmer Should Know Thorben Janssen - Hibernate Tips: More than 70 solutions to common Hibernate problems Vlad Milhalcea - High Performance Java Persistence Nicolai Parlog - The Java Module System \u2b50\u2b50\u2b50\u2b50\u2b50 Testing Arnon Axelrod - Complete Guide to Test Automation \u2b50\u2b50\u2b50\u2b50\u2b50 Alex Soto Bueno, Andy Gumbrecht, Jason Porter - Testing Java Microservices","title":"Reviews"},{"location":"reviews/#reviews","text":"This in an overview of all my reviews I've written so far or which I plan to write. I grouped them loosely by their topic, to make it easier to compare them. Unless a review is listed in the \"Others\" section, it's related to software engineering. This is true for most of my things I review. The reviews are listed in lexicographical order by the name of the (first) author or creator. To read a review simply click on the link. If there's no link, I have not written a review yet. I use a \"five star\" value to rate the objects I reviewed, where a single star means \"Did not answer my expectations / meet my needs\", while I use five stars to show \"Totally satisfied my expectations / meet my needs. Highly recommend it.\". I've decided to use a \"five star\" value to rate, because I think a range of three values is too small, while a range of more is too large. Note that all the reviews include my personal opinion (and needs) , meaning that e.g. a book I rate high and useful may not have an equal use for you! All of my reviews are about the object's content, regardless of its author's / creator's social or political points of view!","title":"Reviews"},{"location":"reviews/#books","text":"","title":"Books"},{"location":"reviews/#general","text":"This section contains basic and general knowledge about developing software, not bound to a specific language. Cooper, Reimann, Cronin - About Face: The Essentials of Interaction Design Amazon Kemper, Eickler - Datenbanksysteme Amazon Martin Fowler - Refactoring Simon Harrer - Java by Comparison ( I put it under \"General\" as the code examples are Java, but the essentials are language independent - like in the other books listed here. Simon mentioned he would name the book something like \"Cleaner Code by Comparison\" today. ) Robert Martin - Clean Code Robert Martin - Clean Architecture Gernot Starke - Effektive Softwarearchitekturen David Tanzer - Quick Glance At: Agile Anti-Patterns David Tanzer - Quick Glance At: Agile Engineering Practices: Part 1: Writing Software","title":"General"},{"location":"reviews/#java-java-enterprise","text":"Sebastian Daschner - Architecting Modern Java EE Application Trisha Gee, Kevlin Henney - 97 Things Every Java Programmer Should Know Thorben Janssen - Hibernate Tips: More than 70 solutions to common Hibernate problems Vlad Milhalcea - High Performance Java Persistence Nicolai Parlog - The Java Module System \u2b50\u2b50\u2b50\u2b50\u2b50","title":"Java / Java Enterprise"},{"location":"reviews/#testing","text":"Arnon Axelrod - Complete Guide to Test Automation \u2b50\u2b50\u2b50\u2b50\u2b50 Alex Soto Bueno, Andy Gumbrecht, Jason Porter - Testing Java Microservices","title":"Testing"},{"location":"run/","text":"Running I never liked running or athletics, when I was a kid. For me it was just boring, and I wasn't good at it (one reason being my physical weaknesses including asthma). I always liked team sports more. During the time at school I barely did any sport, but after graduating (and starting my apprenticeship as a software developer) I totally stopped doing any \"physical activity\". As you can imagine I gained weight and some years later I was up to almost 100 kg (at 192 cm height). During my third cancer therapy (in 2014) I've lost almost 30 kg and did not want to get them back. So at the end of 2016 I started running and after a short time I loved it, regardless of the fact that I'm a slow runner. But I'm totally fine with it. For me it's not about the speed, but the feeling and the mental balance to my work. With the lower weight, the improved fitness, and the mental balance I feel so much better than with 100 kg. Finishing my first official 10 km run in May 2017 and finishing some more during the year, in 2018 I joined a local group of people who love running. The group consists of people of all physical states and ages. There are young and older people. People who run fast and finish a half-marathon in under 80 minutes, but also slow runners like me or even slower. There are very athletic ones as well as overweight people. We all love running and have fun doing it, regardless of our individual goals. We motivate each other, especially while practising together. We encourage, especially to do those exercises that you don't like and rarely do alone, together. One nice thing about running is that - even if other people are faster than you - If you both run the same distance, you both run the same distance and both of you can be proud to make it! In October 2018 I finished my first official half-marathon and set myself a new goal - at one day I want to finish the 42,195 km! Sadly, shortly after that highlight some undesirable side effects of the cancer therapy came up, and I had to get two hip prosthesis. I still recover from those surgeries (meaning I'm only back at about 6-7 km running, before pain kicks in), but I'm looking forward to getting back on track. Picture shot and usage allowed by Jo Kleindl (Jo Kleindl - Sportphotography and More)","title":"Running"},{"location":"run/#running","text":"I never liked running or athletics, when I was a kid. For me it was just boring, and I wasn't good at it (one reason being my physical weaknesses including asthma). I always liked team sports more. During the time at school I barely did any sport, but after graduating (and starting my apprenticeship as a software developer) I totally stopped doing any \"physical activity\". As you can imagine I gained weight and some years later I was up to almost 100 kg (at 192 cm height). During my third cancer therapy (in 2014) I've lost almost 30 kg and did not want to get them back. So at the end of 2016 I started running and after a short time I loved it, regardless of the fact that I'm a slow runner. But I'm totally fine with it. For me it's not about the speed, but the feeling and the mental balance to my work. With the lower weight, the improved fitness, and the mental balance I feel so much better than with 100 kg. Finishing my first official 10 km run in May 2017 and finishing some more during the year, in 2018 I joined a local group of people who love running. The group consists of people of all physical states and ages. There are young and older people. People who run fast and finish a half-marathon in under 80 minutes, but also slow runners like me or even slower. There are very athletic ones as well as overweight people. We all love running and have fun doing it, regardless of our individual goals. We motivate each other, especially while practising together. We encourage, especially to do those exercises that you don't like and rarely do alone, together. One nice thing about running is that - even if other people are faster than you - If you both run the same distance, you both run the same distance and both of you can be proud to make it! In October 2018 I finished my first official half-marathon and set myself a new goal - at one day I want to finish the 42,195 km! Sadly, shortly after that highlight some undesirable side effects of the cancer therapy came up, and I had to get two hip prosthesis. I still recover from those surgeries (meaning I'm only back at about 6-7 km running, before pain kicks in), but I'm looking forward to getting back on track. Picture shot and usage allowed by Jo Kleindl (Jo Kleindl - Sportphotography and More)","title":"Running"},{"location":"pics/","text":"Running Java I think you are looking for the real landing page .","title":"Running Java"},{"location":"pics/#running-java","text":"I think you are looking for the real landing page .","title":"Running Java"},{"location":"posts/","text":"Running Java I think you are looking for the real landing page .","title":"Running Java"},{"location":"posts/#running-java","text":"I think you are looking for the real landing page .","title":"Running Java"},{"location":"posts/2021-01-01_I_did_it/","text":"I did it Well. Yes - \"I did it\" ! Up to now for me this phrase was only connected to the T-shirt (with this phrase) I bought after my bungee jump back in 2002. From now on it is also connected to this blog, in which I want to tell you about things I dive into. As described on the front page I plan to write about my two passions: Running and software development with Java (including testing). I'll do this by writing posts about topics I spent time on (e.g. by evaluating some library or self-education) or writing reviews about books I've read (or other thing you can review). In the last year there were several topics I read about and took notes for myself. In addition to that, after I tweeted that I bought some new books, I got asked if I like this or that book and if I would recommend it. This motivated me to create this blog to share my notes and thoughts. That is why (at the moment) I don't plan to publish on a regular or even fixed schedule, but from time to time when I have a topic, motivation and time to do so. Last, but not least: A big \"Thank you!\" to Daniel Kraus , for his advice how to easily build a simple page based on Markdown ! Without his advice this blog would not have been created, because I want to focus on content and not on infrastructure - especially in the beginning. The blog was created using mkdocs.org and the MkDocs Bootstrap Theme \"flatly\" and is hosted on GitHub Pages . As the tools name indicates, its purpose is to create documentation rather than blogs. Maybe I'll create an own theme which fits a bit better for my needs, but as of now it's fine for me. First, let's see how consistent I'll publish content \ud83d\ude0a. This said, again thank you for visiting my blog! I hope you enjoy what you read and if you want to pass me some feedback, please get in contact with me! If you discover some errors (I'm not a native English speaker), please contact me or feel free to create an issue at GitHub .","title":"I did it"},{"location":"posts/2021-01-01_I_did_it/#i-did-it","text":"Well. Yes - \"I did it\" ! Up to now for me this phrase was only connected to the T-shirt (with this phrase) I bought after my bungee jump back in 2002. From now on it is also connected to this blog, in which I want to tell you about things I dive into. As described on the front page I plan to write about my two passions: Running and software development with Java (including testing). I'll do this by writing posts about topics I spent time on (e.g. by evaluating some library or self-education) or writing reviews about books I've read (or other thing you can review). In the last year there were several topics I read about and took notes for myself. In addition to that, after I tweeted that I bought some new books, I got asked if I like this or that book and if I would recommend it. This motivated me to create this blog to share my notes and thoughts. That is why (at the moment) I don't plan to publish on a regular or even fixed schedule, but from time to time when I have a topic, motivation and time to do so. Last, but not least: A big \"Thank you!\" to Daniel Kraus , for his advice how to easily build a simple page based on Markdown ! Without his advice this blog would not have been created, because I want to focus on content and not on infrastructure - especially in the beginning. The blog was created using mkdocs.org and the MkDocs Bootstrap Theme \"flatly\" and is hosted on GitHub Pages . As the tools name indicates, its purpose is to create documentation rather than blogs. Maybe I'll create an own theme which fits a bit better for my needs, but as of now it's fine for me. First, let's see how consistent I'll publish content \ud83d\ude0a. This said, again thank you for visiting my blog! I hope you enjoy what you read and if you want to pass me some feedback, please get in contact with me! If you discover some errors (I'm not a native English speaker), please contact me or feel free to create an issue at GitHub .","title":"I did it"},{"location":"reviews/","text":"Running Java I think you are looking for the real landing page .","title":"Running Java"},{"location":"reviews/#running-java","text":"I think you are looking for the real landing page .","title":"Running Java"},{"location":"reviews/2021-01-01_complete_guide_to_testautomation/","text":"Arnon Axelrod - Complete Guide to Test Automation At the beginning of 2020 my core-colleagues and I had some long discussion about how we can / want to improve our testing abilities to reduce effort on testing, due to continuously reduced resources. We agreed that we need to raise the test automation (which sounds easier as it is in our situation, due to challenges in the organization and some old techniques we use - but this should not be topic of this review). As I'm the team member with the most experience in test automation (our QA manager has almost only manual testing experience), I wrote up some thoughts about a possible road map. After writing it, literally nothing happened. I got some feedback from my two closest mates, but on following meetings with the team the topic was always pushed back. That made me questioning myself, if they only pretend to raise the level of automation or if the document I wrote was just bad. So I started to look for a book, which covers this specific problem, of how to start and how to constantly raise the level of automation. Most things I've read so far only covers the actual doing (e.g. \" How to write a unit test? \") but rather how to start. I read a positive recommendation about Complete Guide to Test Automation somewhere (sorry forgot where), which made me considering buying this book. In general, I'm critical of something, when it claims to be \"entire, \"full\", or \"complete\", but I decided to read it, as it seems to be the best source to read about the topics listed above I found so far. The books subtitle promises that the book covers \"Techniques, Practices, and Patterns for Building and Maintaining Effective Software Projects\" and honestly: It totally does! The book is divided into two parts (not counting the appendix). The first part is titled \"The 'Why' and the 'What'\" . As you can expect, it \"covers the subject of test automation from many different aspects, but more in a \"high-level\" manner\" . The second part covers the \"How\" and is subdivided into \"hands-on tutorials\", which explain \"how to design and build a test automation system\" , and some guidelines for \"using test automation in the most effective way, and how to get the most out of it\" . With my former testing and developing experience the tutorials in the seconds part had less usage for me personally, but I think for beginners they are great, because they explain everything you need to get your first \"green bar\" and why you get it. The guidelines about efficiency were (and will be in the future) more interesting and useful to me, due the situation described in the introduction of this review. Why do I write about the second part of the book before the first one? It's quite simple - the first part makes the book so absolute valuable! It's not only valuable for persons inexperienced with test automation, but also for those with and the leaders / managers of your QA and developer teams! It covers literally all topics that come in mind when dealing with test automation including questions like \"Who shall create the tests?\", \"What are (economically) reasonable parts to automate first?\" and many more. In contrast to many other sources about such question, they are not answered from only one point of view, but Arnon always shows the pro and cons if you decide for one or another way. This is also true for the examples in the second part of the book - they are about the doing not about (chosen) tool or language. Arnon makes clear, that there is not the \"one and only truth or way to do it\", but you have to know the advantages and disadvantages of each decision to find a way, which fits best for you under your circumstances. In my personal situation the book helped me to realized that I already knew most of the critical decisions to be made and that the basic road map I wrote covered most of them. But I also learned new things or topics that should not get out of focus when trying to improve the level of test automation. Having all of these questions and \"must-decide-decisions\" covered in one book makes it a must-read for everyone who wants to seriously deal with test automation in my opinion - especially when you are (in a leading role and) responsible to make decisions about it. As my personal conclusion, this book really is a _\"Complete Guide to Test Automation\" and deserves five stars! Further information Author: Arnon Axelrod Title: Complete Guide to Test Automation ISBN-10 : 9781484238318 ISBN-13 : 978-1484238318 Personal rating: \u2b50\u2b50\u2b50\u2b50\u2b50","title":"Arnon Axelrod - Complete Guide to Test Automation"},{"location":"reviews/2021-01-01_complete_guide_to_testautomation/#arnon-axelrod-complete-guide-to-test-automation","text":"At the beginning of 2020 my core-colleagues and I had some long discussion about how we can / want to improve our testing abilities to reduce effort on testing, due to continuously reduced resources. We agreed that we need to raise the test automation (which sounds easier as it is in our situation, due to challenges in the organization and some old techniques we use - but this should not be topic of this review). As I'm the team member with the most experience in test automation (our QA manager has almost only manual testing experience), I wrote up some thoughts about a possible road map. After writing it, literally nothing happened. I got some feedback from my two closest mates, but on following meetings with the team the topic was always pushed back. That made me questioning myself, if they only pretend to raise the level of automation or if the document I wrote was just bad. So I started to look for a book, which covers this specific problem, of how to start and how to constantly raise the level of automation. Most things I've read so far only covers the actual doing (e.g. \" How to write a unit test? \") but rather how to start. I read a positive recommendation about Complete Guide to Test Automation somewhere (sorry forgot where), which made me considering buying this book. In general, I'm critical of something, when it claims to be \"entire, \"full\", or \"complete\", but I decided to read it, as it seems to be the best source to read about the topics listed above I found so far. The books subtitle promises that the book covers \"Techniques, Practices, and Patterns for Building and Maintaining Effective Software Projects\" and honestly: It totally does! The book is divided into two parts (not counting the appendix). The first part is titled \"The 'Why' and the 'What'\" . As you can expect, it \"covers the subject of test automation from many different aspects, but more in a \"high-level\" manner\" . The second part covers the \"How\" and is subdivided into \"hands-on tutorials\", which explain \"how to design and build a test automation system\" , and some guidelines for \"using test automation in the most effective way, and how to get the most out of it\" . With my former testing and developing experience the tutorials in the seconds part had less usage for me personally, but I think for beginners they are great, because they explain everything you need to get your first \"green bar\" and why you get it. The guidelines about efficiency were (and will be in the future) more interesting and useful to me, due the situation described in the introduction of this review. Why do I write about the second part of the book before the first one? It's quite simple - the first part makes the book so absolute valuable! It's not only valuable for persons inexperienced with test automation, but also for those with and the leaders / managers of your QA and developer teams! It covers literally all topics that come in mind when dealing with test automation including questions like \"Who shall create the tests?\", \"What are (economically) reasonable parts to automate first?\" and many more. In contrast to many other sources about such question, they are not answered from only one point of view, but Arnon always shows the pro and cons if you decide for one or another way. This is also true for the examples in the second part of the book - they are about the doing not about (chosen) tool or language. Arnon makes clear, that there is not the \"one and only truth or way to do it\", but you have to know the advantages and disadvantages of each decision to find a way, which fits best for you under your circumstances. In my personal situation the book helped me to realized that I already knew most of the critical decisions to be made and that the basic road map I wrote covered most of them. But I also learned new things or topics that should not get out of focus when trying to improve the level of test automation. Having all of these questions and \"must-decide-decisions\" covered in one book makes it a must-read for everyone who wants to seriously deal with test automation in my opinion - especially when you are (in a leading role and) responsible to make decisions about it. As my personal conclusion, this book really is a _\"Complete Guide to Test Automation\" and deserves five stars! Further information Author: Arnon Axelrod Title: Complete Guide to Test Automation ISBN-10 : 9781484238318 ISBN-13 : 978-1484238318 Personal rating: \u2b50\u2b50\u2b50\u2b50\u2b50","title":"Arnon Axelrod - Complete Guide to Test Automation"},{"location":"reviews/2021-01-01_the_java_module_system/","text":"Nicolai Parlog - The Java Module System This is a translation of my (German) Amazon review I wrote in August 2019 Before I read this book, the only thing I knew about the JPMS was, that \"Project Jigsaw\" was one of the biggest changes in the Java ecosystem, if not the biggest one and has something to do only have on JAR file, which contains exactly what you really need and not a bunch of things you don't. As I only have to deal with Java 8 at my work (and most probably will for a long time), I never dive into the details of Jigsaw. At some time I realized that it has something to do with modularization and my interest was drawn. I started to read further about the topic, because I wanted to know how this should work (also downward compatible) and if there would be some kind of dependency-management like when using Maven . I knew that Nicolai was writing a book about the module system and I decided to take this book to come in touch with the topic. One reason to choose this book was that I knew Nicolai from the Javaland conference , where he gave a great talk about how to document your code. I don't regret my decision at no time. The book boasts a very good structure, an easy-to-understand style of writing, and with comprehensible examples. All this is substantiated with numerous images and code snippets. For those, who don't only want to read the book, but also want to try the examples and commands, can do this by downloading and using the corresponding Github project. At the beginning Nicolai introduces the problematic in a very understandable way and describes the motivation and challenges of the JPMS. After that he explains the basics of the JPMS and slowly rises the topic's complexity - without leaving hopelessly the behind. Nicolais does not describe the JPMS in some straight-forward kind of documentation, but looks over the rim of a tea cup to describe the motivation behind it. He also rises several \"Why not just doing it this way? Wouldn't that be possible?\" questions, but of course answers them immediately. The book also contains the differentiation of the JPMS to build-tools like Maven or Gradle , to show that those tools don't have much in common with the JPMS as you might expect. After the excellent introduction, at which end the reader not only understands the JPMS, but also knows how to define and use modules, a long, practical oriented part. In this part the reader learns countless hints, about pitfalls and possible problems which can occur when changing to Java 9+, but also solutions to solve / avoid them. These topics are not only described when using a Java 9+ JDK, but also for migrating small and large applications. I don't know when I personally will be confronted with the migration to Java 9+ at my job, but I already know that Nicolai's book will have a permanent slot at my desk, so I can read up things everytime I need to. This is another strength of the book! You don't have to read it from the beginning to the end. You are free to choose your own path through the book, depending on how much you already know, when you are only interested in a specific topic / problem, or if you \"need to know some oddities of the module system, because you are invited to a party to make some conversions there\" . As an absolute novice, I focused on topics about the fundamentals and how to use the JPMS. I read the chapters about migrating applications with focussing on problems and pitfalls and I will (as already written) capture the solutions described in the book. The book gets completed with a meaningful appendix, in which basics of topics related to the JPMS (e.g. the Java class-path) are described briefly and to the point, but still easy to understand. This saves the reader from the need to search for and dig through related writing or websites, when he forgets about something. After reading the book, I now can imagine that thousands of heads must have blown up during \"Project Jigsaw\" with all those problems, challenges and complex situations, and I absolutely raise my hat to the implementation! At the same time I'm happy that Nicolai presents its complexity in an extremely understandable way in this book, so that people like me don't have fear the JPMS. Thank you, Nicolai! Further information Author: Nicolai Parlog Title: The Java Module System ISBN-10 : 1617294284 ISBN-13 : 978-1617294280 Personal rating: \u2b50\u2b50\u2b50\u2b50\u2b50","title":"Nicolai Parlog - The Java Module System"},{"location":"reviews/2021-01-01_the_java_module_system/#nicolai-parlog-the-java-module-system","text":"This is a translation of my (German) Amazon review I wrote in August 2019 Before I read this book, the only thing I knew about the JPMS was, that \"Project Jigsaw\" was one of the biggest changes in the Java ecosystem, if not the biggest one and has something to do only have on JAR file, which contains exactly what you really need and not a bunch of things you don't. As I only have to deal with Java 8 at my work (and most probably will for a long time), I never dive into the details of Jigsaw. At some time I realized that it has something to do with modularization and my interest was drawn. I started to read further about the topic, because I wanted to know how this should work (also downward compatible) and if there would be some kind of dependency-management like when using Maven . I knew that Nicolai was writing a book about the module system and I decided to take this book to come in touch with the topic. One reason to choose this book was that I knew Nicolai from the Javaland conference , where he gave a great talk about how to document your code. I don't regret my decision at no time. The book boasts a very good structure, an easy-to-understand style of writing, and with comprehensible examples. All this is substantiated with numerous images and code snippets. For those, who don't only want to read the book, but also want to try the examples and commands, can do this by downloading and using the corresponding Github project. At the beginning Nicolai introduces the problematic in a very understandable way and describes the motivation and challenges of the JPMS. After that he explains the basics of the JPMS and slowly rises the topic's complexity - without leaving hopelessly the behind. Nicolais does not describe the JPMS in some straight-forward kind of documentation, but looks over the rim of a tea cup to describe the motivation behind it. He also rises several \"Why not just doing it this way? Wouldn't that be possible?\" questions, but of course answers them immediately. The book also contains the differentiation of the JPMS to build-tools like Maven or Gradle , to show that those tools don't have much in common with the JPMS as you might expect. After the excellent introduction, at which end the reader not only understands the JPMS, but also knows how to define and use modules, a long, practical oriented part. In this part the reader learns countless hints, about pitfalls and possible problems which can occur when changing to Java 9+, but also solutions to solve / avoid them. These topics are not only described when using a Java 9+ JDK, but also for migrating small and large applications. I don't know when I personally will be confronted with the migration to Java 9+ at my job, but I already know that Nicolai's book will have a permanent slot at my desk, so I can read up things everytime I need to. This is another strength of the book! You don't have to read it from the beginning to the end. You are free to choose your own path through the book, depending on how much you already know, when you are only interested in a specific topic / problem, or if you \"need to know some oddities of the module system, because you are invited to a party to make some conversions there\" . As an absolute novice, I focused on topics about the fundamentals and how to use the JPMS. I read the chapters about migrating applications with focussing on problems and pitfalls and I will (as already written) capture the solutions described in the book. The book gets completed with a meaningful appendix, in which basics of topics related to the JPMS (e.g. the Java class-path) are described briefly and to the point, but still easy to understand. This saves the reader from the need to search for and dig through related writing or websites, when he forgets about something. After reading the book, I now can imagine that thousands of heads must have blown up during \"Project Jigsaw\" with all those problems, challenges and complex situations, and I absolutely raise my hat to the implementation! At the same time I'm happy that Nicolai presents its complexity in an extremely understandable way in this book, so that people like me don't have fear the JPMS. Thank you, Nicolai! Further information Author: Nicolai Parlog Title: The Java Module System ISBN-10 : 1617294284 ISBN-13 : 978-1617294280 Personal rating: \u2b50\u2b50\u2b50\u2b50\u2b50","title":"Nicolai Parlog - The Java Module System"}]}